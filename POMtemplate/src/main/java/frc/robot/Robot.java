// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

package frc.robot;

import static frc.robot.Constants.*;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.A;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.B;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.LB;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.LEFT_STICK_X;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.LEFT_STICK_Y;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.POV_LEFT;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.POV_NONE;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.POV_RIGHT;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.RB;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.RIGHT_TRIGGER;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.START;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.X;
import static frc.robot.POM_lib.Joysticks.JoystickConstants.Y;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import com.ctre.phoenix.sensors.PigeonIMU;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;

import edu.wpi.first.hal.FRCNetComm.tInstances;
import edu.wpi.first.hal.FRCNetComm.tResourceType;
import edu.wpi.first.hal.HAL;
import edu.wpi.first.math.controller.ArmFeedforward;
import edu.wpi.first.wpilibj.DataLogManager;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
    
    
    private Command m_autonomousCommand;
    
    private RobotContainer m_robotContainer;
    
    private CANSparkMax intakeMotor = new CANSparkMax(ID_INTAKE, MotorType.kBrushless);
    Joystick joystick = new Joystick(JOYSTICK_PORT); 
    
    private final CANSparkMax liftMotor = new CANSparkMax(5, com.revrobotics.CANSparkLowLevel.MotorType.kBrushless);
    private RelativeEncoder encoder = liftMotor.getEncoder();
    private ArmFeedforward ff = new ArmFeedforward(0, KG, 0);
    
    DigitalInput foldSwitch = new DigitalInput(FOLD);
    DigitalInput groundSwitch = new DigitalInput(GROUND);
    
    private boolean toClose = false;
    private boolean toOpen = false;
    private boolean isIntake = false;
    private boolean openClose = false;
    private boolean isIntakePositive = true;
    
    
    
    WPI_TalonSRX leftTalonSPX = new WPI_TalonSRX(LEFT_TALON_SRX);
    WPI_VictorSPX leftVictorSPX = new WPI_VictorSPX(LEFT_VICTOR_SPX);
    WPI_TalonSRX rightTalonSPX = new WPI_TalonSRX(RIGHT_TALON_SRX);
    WPI_VictorSPX rightVictorSPX = new WPI_VictorSPX(RIGHT_VICTOR_SPX);
    
    PigeonIMU gyro = new PigeonIMU(7);
    private double lastAngle = 0;
    private boolean notToTurn = true;
    
    private Timer timer = new Timer();
    private final DifferentialDrive m_drive =
    new DifferentialDrive(leftTalonSPX::set, rightTalonSPX::set);
    
    private enum State{
        OPEN_ARM,
        DRIVE_AND_INTAKE,
        CLOSE_ARM,
        TURN_100_D,
        DRIVE,
        DEFAULT
    }
    private State state = State.OPEN_ARM;
    
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */

    public double resistGravity(){
        return ff.calculate(encoder.getPosition(), 0);
    }
    
    @Override
    public void robotInit() {
        // Instantiate our RobotContainer.  This will perform all our button bindings, and put our
        // autonomous chooser on the dashboard.
        m_robotContainer = RobotContainer.getInstance();
        HAL.report(tResourceType.kResourceType_Framework, tInstances.kFramework_RobotBuilder);
        enableLiveWindowInTest(true);
        encoder.setPositionConversionFactor((1.0 / 50) * (16.0 / 42) * 2 * Math.PI);
        leftVictorSPX.follow(leftTalonSPX);
        rightVictorSPX.follow(rightTalonSPX);
        SmartDashboard.putString("state", "robot init");
    }

    /**
    * This function is called every robot packet, no matter the mode. Use this for items like
    * diagnostics that you want ran during disabled, autonomous, teleoperated and test.
    *
    * <p>This runs after the mode specific periodic functions, but before
    * LiveWindow and SmartDashboard integrated updating.
    */
    @Override
    public void robotPeriodic() {
        // Runs the Scheduler.  This is responsible for polling buttons, adding newly-scheduled
        // commands, running already-scheduled commands, removing finished or interrupted commands,
        // and running subsystem periodic() methods.  This must be called from the robot's periodic
        // block in order for anything in the Command-based framework to work.
        CommandScheduler.getInstance().run();
        SmartDashboard.putNumber("arm encoder", encoder.getPosition());
        SmartDashboard.putNumber("gravity resist", resistGravity());

        SmartDashboard.putBoolean("fold Switch", !foldSwitch.get());
        SmartDashboard.putBoolean("ground Switch", !groundSwitch.get());
        SmartDashboard.putNumber("this angle", gyro.getYaw());
        SmartDashboard.putNumber("last angle", lastAngle);
        SmartDashboard.putBoolean("to turn", !notToTurn);
        SmartDashboard.putNumber("timer", timer.get());




        if(!foldSwitch.get()){
            encoder.setPosition(FOLD_OF_SET);
        }
    }


    /**
    * This function is called once each time the robot enters Disabled mode.
    */
    @Override
    public void disabledInit() {
    }

    @Override
    public void disabledPeriodic() {
    }

    /**
    * This autonomous runs the autonomous command selected by your {@link RobotContainer} class.
    */
    @Override
    public void autonomousInit() {
        m_autonomousCommand = m_robotContainer.getAutonomousCommand();

        // schedule the autonomous command (example)
        if (m_autonomousCommand != null) {
            m_autonomousCommand.schedule();
        }
        timer.start();
        state = State.OPEN_ARM;
    }
    
    /**
     * This function is called periodically during autonomous.
     */
    @Override
    public void autonomousPeriodic() {
        // state = State.OPEN_ARM;
        switch(state){
            case OPEN_ARM:
                if(groundSwitch.get()){
                    liftMotor.set(LIFT_MOTOR_SPEED + resistGravity());   
                } 
                else{
                    liftMotor.set(0);   
                    state = State.DRIVE_AND_INTAKE;
                    timer.restart();
                    intakeMotor.set(-INTAKE_SPEED);
                }
                SmartDashboard.putString("state", "open arm");
                break;
            case DRIVE_AND_INTAKE:
                m_drive.arcadeDrive(0, -0.2,false);
                if(timer.get() > AUTO_DRIVE_TIME){
                    m_drive.arcadeDrive(0, 0,false);
                    state = State.CLOSE_ARM;
                    intakeMotor.set(0);
                }
                SmartDashboard.putString("state", "drive and intake");
                break;
            case CLOSE_ARM:
                if(foldSwitch.get()){
                    liftMotor.set(-LIFT_MOTOR_SPEED + resistGravity());   
                }
                else{
                    liftMotor.set(0);   
                    state = State.TURN_100_D;
                    lastAngle = gyro.getYaw();
                }
                SmartDashboard.putString("state", "close arm");
                break;
            case TURN_100_D:
                if(gyro.getYaw() - TURN_180_DEGREE < lastAngle){
                    m_drive.arcadeDrive(-TURN_SPEED, 0, false);
                }
                else{
                    m_drive.arcadeDrive(0, 0, false);
                    timer.restart();
                    state = State.DRIVE;
                }
                SmartDashboard.putString("state", "180 turn");
                break;
            case DRIVE:
                m_drive.arcadeDrive(0, -0.2,false);
                if(timer.get() >= AUTO_DRIVE_TIME){
                    m_drive.arcadeDrive(0, 0,false);
                    state = State.DEFAULT;
                    
                }
                SmartDashboard.putString("state", "drive");
                break;
            default:
                m_drive.arcadeDrive(0, 0,false);
                SmartDashboard.putString("state", "default");
                break; 
                
                
            }
        }
        
    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (m_autonomousCommand != null) {
            m_autonomousCommand.cancel();
        }

        leftVictorSPX.setInverted(true);
        leftTalonSPX.setInverted(true);
        
    }
    
    /**
     * This function is called periodically during operator control.
     */
    private void joystickButton(){
        if(joystick.getRawButtonPressed(A)){
            toOpen = true;
            toClose = false;
        }    
        if(joystick.getRawButtonPressed(B)){
            toClose = true;
            toOpen = false;
        }    
        if(joystick.getRawButtonPressed(LB)){
            toClose = false;
            toOpen = false;
        }    
        if(joystick.getRawButtonPressed(X)){
            openClose = true;
            toOpen = true;
            toClose = false;
            isIntakePositive = false;
            isIntake = false;
        }    
        if(joystick.getRawButtonReleased(X)){
            isIntake = false;
            toClose = true;
            toOpen = false;
        }
        if(joystick.getRawButtonPressed(Y)){
            openClose = true;
            toOpen = true;
            toClose = false;
            isIntakePositive = true;
            isIntake = false;
        }
        else if(joystick.getRawButtonReleased(Y)){
            isIntake = false;
            toClose = true;
            toOpen = false;
        }
    }
    
    
    private void doIntake(){
        
        if(joystick.getPOV() == POV_LEFT){
            intakeMotor.set(INTAKE_SPEED);
        }
        if(joystick.getPOV() == POV_RIGHT){
            intakeMotor.set(-INTAKE_SPEED);
        }
        if(joystick.getPOV() == POV_NONE){
            intakeMotor.set(0);
        }
    }


    private void moveArm(){        
        if(groundSwitch.get() && toClose){
            openClose = false;
        }
        if(toOpen){
            if(groundSwitch.get()){                
                liftMotor.set(LIFT_MOTOR_SPEED + resistGravity());   
            }
            else{
                toOpen = false;
                liftMotor.set(0);
                isIntake = true;
            }
        }
        else if(toClose){
            if(foldSwitch.get()){                
                liftMotor.set(-LIFT_MOTOR_SPEED + resistGravity());   
            }
            else{
                toClose = false;
                liftMotor.set(0);
            }
        }
    
        else if(!groundSwitch.get() || !foldSwitch.get()){
            liftMotor.set(0);
        }
        
        
        else{
            liftMotor.set(resistGravity());
        }
    
    
        if(openClose){
            if (!groundSwitch.get()){
                if(isIntakePositive){
                    intakeMotor.set(INTAKE_SPEED);
                }
                else{
                    intakeMotor.set(-INTAKE_SPEED);
                }
            }
            else{
                intakeMotor.set(0);
            }
        }
        
    }
    private boolean turnDegrees(){
        if(gyro.getYaw() - TURN_90_DEGREE < lastAngle){
            m_drive.arcadeDrive(0, -TURN_SPEED, false);
            return false;
        }
        return true;
    } 
    @Override
    public void teleopPeriodic() {
        doIntake();
        joystickButton();
        moveArm();
        if(joystick.getRawButtonPressed(START)){
            lastAngle = gyro.getYaw();
            notToTurn = false;
        }
        if(!notToTurn){
            notToTurn = turnDegrees();
        }
        else{
            m_drive.arcadeDrive(joystick.getRawAxis(LEFT_STICK_Y)*SLOW_DRIVE, joystick.getRawAxis(LEFT_STICK_X)*SLOW_DRIVE);
        }
        
    }   
    
    
        
    

    @Override
    public void testInit() {
        // Cancels all running commands at the start of test mode.
        CommandScheduler.getInstance().cancelAll();
    }

    /**
    * This function is called periodically during test mode.
    */
    @Override
    public void testPeriodic() {
    }

}
